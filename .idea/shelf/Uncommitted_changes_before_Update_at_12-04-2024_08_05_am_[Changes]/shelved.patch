Index: rgapiapp/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport logging\r\nimport tempfile\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom robot import run\r\n\r\nlogger = logging.getLogger(__name__)\r\n@csrf_exempt\r\ndef execute_tests(request):\r\n    if request.method == 'POST':\r\n        try:\r\n            payload = json.loads(request.body)\r\n        except json.JSONDecodeError as e:\r\n            error_message = f'Error parsing JSON payload: {e}'\r\n            logger.error(error_message)\r\n            return JsonResponse({'error': error_message}, status=400)\r\n\r\n        logger.info(f'Parsed payload: {payload}')\r\n\r\n        tests = payload.get('tests', [])\r\n\r\n        if not tests:\r\n            error_message = 'No tests found in the payload'\r\n            logger.error(error_message)\r\n            return JsonResponse({'error': error_message}, status=400)\r\n\r\n        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.robot') as temp_file:\r\n            temp_file.write(\"*** Settings ***\\n\")\r\n            temp_file.write(\"Library    SeleniumLibrary\\n\")\r\n            temp_file.write(\"\\n\")\r\n            temp_file.write(\"*** Test Cases ***\\n\")\r\n            for test in tests:\r\n                title = test.get('title', 'Untitled Test')\r\n                temp_file.write(f\"{title}\\n\")\r\n                steps = test.get('steps', [])\r\n                for step in steps:\r\n                    temp_file.write(f\"    {step}\\n\")\r\n                temp_file.write(\"\\n\")  # Add a blank line after each test case\r\n\r\n        try:\r\n            output = run(temp_file.name, output='output.xml')\r\n            logger.info('Test execution completed successfully')\r\n            # Parse the output XML file and return the test results\r\n            return JsonResponse({'output': output})\r\n        except Exception as e:\r\n            error_message = f'Error executing tests: {e}'\r\n            logger.error(error_message)\r\n            return JsonResponse({'error': error_message}, status=500)\r\n\r\n    else:\r\n        return JsonResponse({'error': 'Invalid request method'}, status=405)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/rgapiapp/views.py b/rgapiapp/views.py
--- a/rgapiapp/views.py	(revision 3d4c2382ec03e8dbbfcb64394bb3b1064ceb4909)
+++ b/rgapiapp/views.py	(date 1712889157853)
@@ -1,52 +1,0 @@
-import json
-import logging
-import tempfile
-from django.http import JsonResponse
-from django.views.decorators.csrf import csrf_exempt
-from robot import run
-
-logger = logging.getLogger(__name__)
-@csrf_exempt
-def execute_tests(request):
-    if request.method == 'POST':
-        try:
-            payload = json.loads(request.body)
-        except json.JSONDecodeError as e:
-            error_message = f'Error parsing JSON payload: {e}'
-            logger.error(error_message)
-            return JsonResponse({'error': error_message}, status=400)
-
-        logger.info(f'Parsed payload: {payload}')
-
-        tests = payload.get('tests', [])
-
-        if not tests:
-            error_message = 'No tests found in the payload'
-            logger.error(error_message)
-            return JsonResponse({'error': error_message}, status=400)
-
-        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.robot') as temp_file:
-            temp_file.write("*** Settings ***\n")
-            temp_file.write("Library    SeleniumLibrary\n")
-            temp_file.write("\n")
-            temp_file.write("*** Test Cases ***\n")
-            for test in tests:
-                title = test.get('title', 'Untitled Test')
-                temp_file.write(f"{title}\n")
-                steps = test.get('steps', [])
-                for step in steps:
-                    temp_file.write(f"    {step}\n")
-                temp_file.write("\n")  # Add a blank line after each test case
-
-        try:
-            output = run(temp_file.name, output='output.xml')
-            logger.info('Test execution completed successfully')
-            # Parse the output XML file and return the test results
-            return JsonResponse({'output': output})
-        except Exception as e:
-            error_message = f'Error executing tests: {e}'
-            logger.error(error_message)
-            return JsonResponse({'error': error_message}, status=500)
-
-    else:
-        return JsonResponse({'error': 'Invalid request method'}, status=405)
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1712889162880)
+++ b/README.md	(date 1712889162880)
@@ -0,0 +1,18 @@
+# UMATE
+
+### UMATE is a customized api made to rapidly automate using API
+
+##### Sample for post method
+```
+{
+  "tests": [
+    {
+      "title": "Open google.com",
+      "steps": [
+        "SeleniumLibrary.Open Browser    browser=chrome",
+        "SeleniumLibrary.Go To    url=https://google.com"
+      ]
+    }
+  ]
+}
+```
